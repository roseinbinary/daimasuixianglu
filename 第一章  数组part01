🧩 LeetCode 刷题日记

日期： 2025/10/09
主题： 数组基础与双指针入门
题目：
704. Binary Search
27.Remove Element
977.Squares of a Sorted Array

今日状态： 理解了二分法边界写法与双指针的核心思想，有恍然大悟的时刻。

🧠 解题思路总结
704. Binary Search

学习重点在于理解 左闭右闭 [left, right] 与 左闭右开 [left, right) 两种写法的区别。

不同区间会影响 while 条件 (<= vs <) 和右边界更新方式 (right = mid - 1 vs right = mid)。

注意 mid = left + (right - left) // 2 可避免整数溢出。

27. Remove Element

典型的 双指针 模式：快指针负责遍历查找，慢指针负责更新数组。

当 nums[fast] != val 时，将 nums[slow] = nums[fast]，然后 slow++。

当 nums[fast] == val 时，快指针单独前进一次，实现“跳过”。

这种模式的关键在于：快指针找目标，慢指针写结果。

977. Squares of a Sorted Array

原数组已排序，因此可以从两端向中间比较绝对值大小。

较大的平方放在结果数组的尾部，从后向前填充。

双指针让算法复杂度从 O(n log n)（排序）降到 O(n)。

思路：比较两端，填后端，双指针向中间靠拢。

⚡ 易错点 / 卡壳点

二分查找中 while 的边界条件容易混乱：要让代码逻辑与区间定义保持一致。

双指针初学时容易忘记 快指针走在前面，慢指针写结果 的本质。

对 ++left 与 left++ 的区别不够熟悉（前者先加后用，后者先用后加）。

✅ 改进方案

每次写二分前，先写出区间定义，然后决定 while 条件与边界更新方式。

遇到双指针题，画出 两个指针的移动轨迹 帮助理解逻辑。

在 IDE 里多打印变量变化（如快慢指针值）来熟悉指针关系。

练习时刻意对比 ++left 和 left++ 的行为差异（尤其是在 for/while 内部使用时）。

💬 一句话总结

今天真正理解了“双指针是用空间换逻辑清晰”的思想，也开始能区分二分法不同区间写法的由来。
